#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var { app,sessionMiddleware } = require('../app');
 var debug = require('debug')('sotuken:server');
 var http = require('http');
 var express = require('express');
 const path = require('path');
 var ExcelJS = require('exceljs');
 var validator = require('validator');
 var fs = require('fs');
 var poolCluster = app.get('pool');
 var async = require('async');
 var crypto = require('crypto');
 const sha512 = crypto.createHash('sha512');
 const encoding = 'hex';
 const sanitizeHtml = require('sanitize-html');
 
 
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 var server = http.createServer(app);
 var { Server } =require("socket.io");
 var io = new Server(server);
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port,'0.0.0.0', () => {console.log('サーバ起動しました。\nlistening on "[このサーバ機のIPアドレス]:3000"');});
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 
 const mysql = require('mysql2');
 const store = require('store');
 const { connect } = require('http2');
 const { namespace } = require('store');

  // Socket.ioにセッションミドルウェアを適用する
  io.use((socket, next) => {
      sessionMiddleware(socket.request, {}, next);
  });

 
 io.on('connection', (socket) => {//ページが繋がったとき
   console.log(socket.request.session);
   const mysql_setting = {
     host: 'localhost',
     user: 'root',
     password: 'Bonobo09040425',
     database: 'mydb2'
   }

   const connection = mysql.createConnection(mysql_setting);
   connection.connect();

   socket.on('crypto1',(data) =>{
    sha512.update(data);
    var sha512Hash = sha512.digest(encoding);
    io.emit('crypto',sha512Hash); 
  })

  socket.on('new_btnclick', (name,pass1,pass2) => {
      if(pass1 == pass2) {
         var new_select1 = "select username from users where username = ?;"
         var new_select2 = "select password from users where password = ?;"
         var new_insert1 = "insert into users values (?,?,?,'2022{01>01','2022{01>01');"
         var kensaku = "SELECT MIN(user_ID + 1100) AS user_ID FROM users WHERE (user_ID + 1100) NOT IN (SELECT user_ID FROM users);"
         connection.query(new_select1,name,(err, new_result1, fields) => {
           connection.query(new_select2,pass1,(err, new_result2, fields) => {
             if(new_result1.length < 1 && pass1.length >= 8 && pass1.length <= 16 && pass1.length != 0 && name.length >= 2 && name.length <= 10) {
               connection.query(kensaku,(err,kensaku1,fields)=>{
                 if(err){
                   console.log(err);
                 }
                 var user = kensaku1[0].user_ID;
                 connection.query(new_insert1,[user,name,pass1],(err, new_result3, fields) => {
                   if(err){
                     console.log(err);
                   }
                   var new_flug = 1;
                   io.emit('new_flug',new_flug);
               })
               })
             }
           })
         })
       }
     })

     socket.on('filedata',(data) =>{
      var q1 = "insert into mondai_LIST values(?,?,?,?,?,?,?,?,?,?,?);"
      var q2 = "select MIN(mon_ID  + 1) AS mon_ID from mondai_LIST where (mon_ID + 1) NOT IN (SELECT mon_ID from mondai_LIST);"
      var q3 = "select MIN(seikai_ID  + 1) AS seikai_ID from seikai_LIST where (seikai_ID + 1) NOT IN (SELECT seikai_ID from seikai_LIST);"
      var q4 = "insert into seikai_LIST values(?,?,?);"
      var da = "a";
      var moni = 0;
      var name = data[0];
      var mondaibun = data[1];
      var sen1 = data[2];
      var sen2 = data[3];
      var sen3 = data[4];
      var sen4 = data[5];
      var seikai = data[6];
      var seiID = 0;
      var kaiID = 0;
      if(data[7] != "なし"){
        var picture = data[7];
      }else{
        var picture = "";
      }
      connection.query(q2,(err,result,field)=>{
        if(err){
          console.log(err);
        }
        moni = result[0].mon_ID;
        if(sen1 == "なし"){
          sen1 = "";
          sen2 = "";
          sen3 = "";
          sen4 = "";
          kaiID = 1;
        }
        connection.query(q3,(err,result2,field)=>{
            if(err){
              console.log(err);
            }
            seiID = result2[0].seikai_ID;
            connection.query(q4,[seiID,moni,seikai],(err,result3,field)=>{
              if(err){
                console.log(err);
              }
              connection.query(q1,[moni,name,mondaibun,sen1,sen2,sen3,sen4,seiID,0,picture,kaiID],(err,res1,fields)=>{
                if(err){
                  console.log(err);
                }
                connection.commit((err) =>{
                  if(err){connection.rollback(() =>{throw console.log('error');});};
                  io.emit('kanryou');
            })
            })
          })
      })
    })  
    })
    
    socket.on('kekkasyusei',(set1)=>{
      var sql1 = "select user_ID from users where username = ?;"
      var sql2 = "update kaitou_LIST set han = ? where user_ID =?;"
      var d = "a";
      var e = 0;
      for(var i = 0;i<set1.length;i++){
        connection.query(sql1,set1[e][0],(err,result,fields)=>{
        if(err){
          console.log(err);
        }
        console.log(result);
        console.log(e);
        d = set1[e][1];
        console.log(d);
        e = e + 1;
        connection.query(sql2,[d,result[0].user_ID],(err,result2,field)=>{
          if(err){
            console.log(err);
          }
          console.log(result2);
        })
      })
      }
      connection.commit((err)=>{
        if(err){connection.rollback(()=>{throw console.log('error');});};
        io.emit('kekkahyouji2');
      })
    })

     socket.on('kaitoutuika',(array)=>{
       var sql = "SELECT MIN(seikai_ID + 1) AS seikai_ID FROM seikai_LIST WHERE (seikai_ID+ 1) NOT IN (SELECT seikai_ID FROM seikai_LIST);"
       var sql2 = "insert into seikai_LIST values(?,?,?);"
       var sql3 = "update kaitou_LIST set han = '○' where kai =?;"
       var e = 0;
       var f = "a";
       var g = "a";
       console.log(array);
       async.waterfall([
        function(callback){
          for(var i = 0;i<array.length ;i++){
            connection.query(sql,(err,result,field)=>{
              if(err){
                console.log(err);
              }
              f = array[e]
              g = array[e + 1]
              console.log(g);
              connection.query(sql2,[result[0].seikai_ID,f,g],(err,result2,fields)=>{
                if(err){
                  console.log(err);
                }
                connection.query(sql3,g,(err,result3,field)=>{
                  if(err){
                    console.log(err);
                  }
                  e = e + 1;
                })
              })
            })
          }
          setTimeout(function(){
            callback(null,1);
          },1000);
        },
        function(callback){
          io.emit('yomikomi');
        }
       ])
     })
   
     socket.on('kaitousakuzyo',(array)=>{
       var sql = "delete from seikai_LIST where seikai = ?;"
       var sql2 = "update kaitou_LIST set han = '✕' where kai =?;"
       var l = 0;
       var g = "a";
       console.log(array);
       async.waterfall([
         function(callback){
           for(var i = 0;i<array.length;i++){
             g = array[l]
             connection.query(sql,g,(err,result,field)=>{
               if(err){
                 console.log(err);
               }
               l = l+1;
               connection.query(sql2,g,(err,result2,field)=>{
                 if(err){
                   console.log(err);
                 }
               })
             })
           }
           setTimeout(function() {
             callback(null,1);
           }, 1000);
         },
         function(callback){
           io.emit('yomikomi');
         }
       ])
     })
     
     socket.on('montuika',(array)=>{
      var q1 = "insert into mondai_LIST values(?,?,?,?,?,?,?,?,?,?,?);"
      var q2 = "select MIN(mon_ID  + 1) AS mon_ID from mondai_LIST where (mon_ID + 1) NOT IN (SELECT mon_ID from mondai_LIST);"
      var q3 = "select MIN(seikai_ID  + 1) AS seikai_ID from seikai_LIST where (seikai_ID + 1) NOT IN (SELECT seikai_ID from seikai_LIST);"
      var q4 = "insert into seikai_LIST values(?,?,?);"
      var da = "a";
      console.log(array);
      var moni = 0;
      var name = array[0];
      var mondaibun = array[1];
      var sen1 = array[2];
      var sen2 = array[3];
      var sen3 = array[4];
      var sen4 = array[5];
      var seikai = array[6];
      var seiID = 0;
      var kaiID = 0;
      if(sen1 == "なし"){
        sen1 = "";
        sen2 = "";
        sen3 = "";
        sen4 = "";
        kaiID = 1;
      }
      if(array[7] != "なし"){
        var picture = array[7];
      }else{
        var picture = "";
      }
      connection.query(q2,(err,res,field)=>{
        if(err){
          console.log(err);
        }
        moni = res[0].mon_ID;
        connection.query(q3,(err,res2,field)=>{
          if(err){
            console.log(err);
          }
          seiID = res2[0].seikai_ID;
          connection.query(q4,[seiID,moni,seikai],(err,res3,field)=>{
            if(err){
              console.log(err);
            }
            connection.query(q1,[moni,name,mondaibun,sen1,sen2,sen3,sen4,seiID,0,picture,kaiID],(err,res4,field)=>{
              if(err){
                console.log(err);
              }
              connection.commit((err) =>{
                if(err){connection.rollback(() =>{throw console.log('error');});};
                io.emit('kanryou');
              })  
            })
          })
        })
      })
    })
    
     socket.on('syokika',()=>{
        var sql1="truncate table time_LIST;"
        var sql2="truncate table kaitou_LIST;"
        var sql3="update mondai_LIST set sentaku= 0 where sentaku = 1"
        var sql4 = "truncate table monhan_LIST";
        connection.query(sql1,(err,result1,fields)=>{
         if(err){
           console.log(err);
         }
         connection.query(sql2,(err,result2,fields)=>{
           if(err){
             console.log(err);
           }
           connection.query(sql3,(err,results2,fields)=>{
             if(err){
               console.log(err);
             }
             connection.query(sql4,(err,result4,fields)=>{
               if(err){
                 console.log(err);
               }
               io.emit('modoru');
             })
           })
         })
        })
     })
   
     socket.on('hyou',(c) =>{
         io.emit('hyouji',c);
      })
   
     socket.on('kekkahyouji',(cell)=>{
         io.emit('kekkahyouji2',cell);
     })
     
     // login
     socket.on('login_btnclick', (data) => {
      var username = sanitizeHtml(data.username);
      var password = sanitizeHtml(data.password);
      if(data.ExcelJSusername != '') {
          var login_select = "SELECT * FROM user_table;";
          connection.query(login_select,(err, users, fields) => {
              if(err){
                  console.log(err);
                  var new_flug = 0;
                  io.emit('new_flug', new_flug);
              } else {
                  var user = users.find(user => user.user_ID === username && user.password === password);
                  if(user) {
                      var login_flug = 1;
                      switch(user.user_type) {
                          case 1:
                              async.waterfall([
                                function(callback) {
                                    var sql2 = 'SELECT room_ID FROM room_table WHERE user_ID = ?;';
                                    connection.query(sql2, data.username, function(err, result) {
                                        if (err) {
                                            return callback(err);
                                        }
                                        callback(null, result[0].room_ID);
                                    });
                                },
                                function(roomID, callback) {
                                    var sql3 = 'INSERT INTO login_log(room_ID, user_ID) VALUES (?, ?);';
                                    connection.query(sql3, [roomID, data.username], function(err, result) {
                                        if (err) {
                                            return callback(err);
                                        }
                                        callback(null, 'done');
                                    });
                                },
                                function(result,callback){
                                  socket.request.session.user = {username:username};
                                  socket.request.session.page = {page:'main.ejs'};
                                  socket.request.session.Before_page = {Before_page:'login.ejs'};
                                  socket.request.session.save();
                                  console.log(socket.request.session);
                                  callback(null,'done');
                                }
                            ], function (err, result) {
                                if (err) {
                                    console.log(err);
                                    var new_flug = 0;
                                    io.emit('new_flug', new_flug);
                                } else {
                                    // すべてのクエリが成功した場合の処理
                                    io.to(socket.id).emit('login_flug', login_flug, data.username);
                                }
                            });
                              break;
                          case 2:
                            async.waterfall([
                              function(callback){
                                var sql = 'SELECT user_ID FROM user_table WHERE user_name = ?;';
                                connection.query(sql,data.selectedOption, function(err, result) {
                                    if (err) {
                                        return callback(err);
                                    }
                                    callback(null, result[0].user_ID);
                                });
                              },
                              function(userID,callback) {
                                var sql2 = 'SELECT room_ID FROM room_table WHERE user_ID = ?;';
                                connection.query(sql2,userID, function(err, result) {
                                    if (err) {
                                        return callback(err);
                                    }
                                    callback(null, result[0].room_ID);
                                });
                              },
                              function(roomID,callback) {
                                  var sql3 = 'INSERT INTO login_log(room_ID, user_ID) VALUES (?, ?);';
                                  connection.query(sql3, [roomID, data.username], function(err, result) {
                                      if (err) {
                                          return callback(err);
                                      }
                                      callback(null, 'done');
                                  });
                              }
                            ], function (err, result) {
                              if (err) {
                                  console.log(err);
                                  var new_flug = 0;
                                  io.emit('new_flug', new_flug);
                              } else {
                                  // すべてのクエリが成功した場合の処理
                                  io.to(socket.id).emit('login_flug1', login_flug,user.user_name);
                              }
                          });
                              break;
                          case 3:
                              async.waterfall([
                                function(callback){
                                  var sql = 'SELECT user_ID FROM user_table WHERE user_name = ?;';
                                  connection.query(sql,data.selectedOption, function(err, result) {
                                      if (err) {
                                          return callback(err);
                                      }
                                      callback(null, result[0].user_ID,username);
                                  });
                                },
                                function(user_ID,username,callback){
                                  var sql = "select room_ID from room_table where user_ID = ?;";
                                  connection.query(sql,user_ID,(err,result,fields)=>{
                                    if(err){
                                      console.log(err);
                                    }
                                    callback(null,result[0].room_ID,username);
                                  })
                                },
                                function(roomID,username,callback){
                                  var sql2 = "insert into login_log(room_ID,user_ID) values(?,?);"
                                  connection.query(sql2,[roomID,username],(err,result2,fields)=>{
                                    if(err){
                                      console.log(err);
                                    }
                                    io.to(socket.id).emit('login_flug2', login_flug,username);
                                  })
                                },
                              ])
                              break;
                          default:
                              var new_flug = 0;
                              io.to(socket.id).emit('new_flug', new_flug);
                      }
                  } else {
                      var new_flug = 0;
                      io.to(socket.id).emit('new_flug', new_flug);
                  }
              }
          });
      }
  });
   
        socket.on('account_delete',(user_ID)=>{
          var sql = "delete from user_table where user_ID = ?;";
          connection.query(sql,user_ID,(err,result,field)=>{
            if(err){
              console.log(err);
            }
            io.emit('delete_complete');
          })
        })

        socket.on('search_accounts', function(searchTerm) {
          const sql = 'SELECT user_ID, user_name, password,log_time FROM user_table WHERE user_ID LIKE ? OR user_name LIKE ? OR password LIKE ?';
          connection.query(sql, [`%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`], function(err, results) {
              if (err) {
                  // エラー処理
                  console.log(err);
                  socket.emit('search_results', []);
              } else {
                  // 検索結果をクライアントに送信
                  socket.emit('search_results', results);
              }
          });
      });

      socket.on('add_account', function(formData) {
        if(formData.user_type == "学生"){
          var user_typeID = 2
        }else{
          var user_typeID = 2
        }
        var sql = 'insert into user_table(user_ID,user_name,password,user_type) values(?,?,?,?)'
        connection.query(sql,[formData.user_ID,formData.user_name,formData.pass_word,user_typeID],(err,result,field)=>{
          if(err){
            console.log(err);
            socket.emit('account_added');
          }
        })
      });
    
      socket.on('owa2',() =>{
         io.emit('owari');
      })
   
      socket.on('mondai_btnclick',(question_data) => {
         console.log(question_data.userName);
        if(question_data != ''){
          var pool = poolCluster.of('MASTER');
          //
          //データベースサーバーに接続
          async.waterfall([
            function(callback) {
              pool.getConnection(function(err, connection) {
                  if (err) {
                      console.log(err);
                      return callback(err);
                  }
                  callback(null, connection);
              });
            },
            function(connection,callback) {
              var mondai_select = "select q.question_ID,r.room_ID,j.judge_ID from question_table q,room_table r,judge_type j where q.question_name = ? and judge_type = ? and r.user_ID = ?;"
              connection.query(mondai_select, [question_data.question_name,question_data.Scoring_method,question_data.userName], function(err, selectResult) {
                  if (err) {
                      connection.release();
                      console.log(err);
                      return callback(err);
                  }
                  callback(null, connection,selectResult);
              });
            },
            function(connection,selectResult,callback) {
              let judge_insert = "insert into judge_table values (?, ?);";
              let questionID = selectResult[0].question_ID;
              let roomID = selectResult[0].room_ID;
              let judgeID = selectResult[0].judge_ID;
              connection.query(judge_insert, [judgeID,questionID], function(err, result) {
                  if (err) {
                      connection.release();
                      console.log(err);
                      return callback(err);
                  }
                  callback(null, connection, questionID, roomID);
              });
            },
            function(connection, questionID, roomID, callback) {
              let sql3 = "insert into question_log(question_ID, room_ID, question_status, limit_time) values (?, ?, 1, ?);";
              connection.query(sql3, [questionID, roomID,question_data.seconds], function(err, result) {
                  if (err) {
                      connection.release();
                      console.log(err);
                      return callback(err);
                  }
                  connection.release();
                  callback(null, 'success');
              });
            }
          ],function(err,result){
            if (err) {
              io.emit('mondai_kekka', 0);
            } else {
              io.emit('mondai_kekka', 1);
            }
          })
          /*pool.getConnection(function(err,connection){
            if(err != null){
              console.log(err);
              return;
            }
            connection.query(mondai_sentaku,mondai,(err,mondai_result,fields) =>{
              console.log(err);
              connection.query(mondai_select,(err,mondai_result2,fields)=>{
                if(err){
                 var flag = 0;
                 io.emit('mondai_kekka',flag);
                }
                connection.commit((err) =>{
                 if(err){connection.rollback(() =>{throw console.log('error');});}
                })
                var ID = mondai_result2[0].mon_ID;
                connection.query(sql4,o,(err,result,fields) =>{
                 if(err){
                   console.log(err);
                 }
                 var han1 = result[0].han_ID;
                 connection.query(sql3,[ID,han1],(err,result,fields)=>{
                   if(err){
                     console.log(err);
                   }
                 })
               })
               var flag = 1;
               io.emit('mondai_kekka',flag);
               })
             })
           })*/
       }
     })
 
      socket.on('kiroku',(m1,kaitou1) =>{
   
        var pool = poolCluster.of('MASTER');
        async.waterfall([
          function(callback){
            pool.getConnection(function(err, connection) {
              if (err) {
                  console.log(err);
                  return callback(err);
              }
              callback(null, connection);
            });
          },
          function(connection,callback){
            var sql = 'select room_ID from login_log where user_ID = ?;';
            connection.query(sql,m1,(err,result,fields)=>{
              if(err){
                console.log(err);
              }
              var room = result[0].room_ID;
              callback(null,room);
            })
          },
          function(room,callback){
            var select = 'select question_ID from question_log where room_ID = ?;';
            connection.query(select,room,(err,result2,field)=>{
              if(err){
                console.log(err);
              }
              var question = result2[0].question_ID;
              callback(null,question);
            })
          },
          function(question,callback){
            var correct = 'select answer from correct_table where question_ID = ?';
            connection.query(correct,question,(err,result3,fields)=>{
              if(err){
                console.log(err);
              }
              var correct_data = result3[0].answer;
              console.log(correct_data);
              callback(null,correct_data,question);
            })
          },
          function(correct_data,question,callback){
            var judgement = "✕";
            if(kaitou1 == correct_data){
              judgement = "○";
            }
            callback(null,question,judgement);
          },
          function(question,judgement,callback){
            var insert = "insert into answer_table(user_ID,question_ID,answer,ans_pics_flag,result) values(?,?,?,0,?);";
            connection.query(insert,[m1,question,kaitou1,judgement],(err,result4,fields)=>{
              if(err){
                console.log(err);
              }
              callback(null,"success");
            })
          }
        ],function(err,result5){
          if(err){

          }else{
            socket.emit('end');
          }
        })
      })
 
      socket.on('all_commit',()=>{
       connection.commit((err) =>{
         if(err){connection.rollback(() =>{throw console.log('error');});}
         connection.release();
       })
      })

      socket.on('requestQualificationData',function(qualificationName){
        var sql = 'select g.question_genre,g.question_years,q.question_name from question_table q,genre_table g where g.qualification_name = ? and q.question_ID = g.question_ID;';
        connection.query(sql,qualificationName,(err,result,fields)=>{
          if(err){
            console.log(err);
          }
          socket.emit('qualificationData', result);
        });
      })

      socket.on('requestquestionname',function(qualificationName){
        var sql = 'select g.question_genre,q.question_name from question_table q,genre_table g where g.question_years = ? and q.question_ID = g.question_ID;';
        connection.query(sql,qualificationName,(err,result,fields)=>{
          if(err){
            console.log(err);
          }
          socket.emit('questionname', result);
        });
      })

      socket.on('requestgenre',function(qualificationName){
        var sql = 'select g.question_genre from question_table q,genre_table g where q.question_name = ? and q.question_ID = g.question_ID;';
        connection.query(sql,qualificationName,(err,result,fields)=>{
          if(err){
            console.log(err);
          }
          socket.emit('questiongenre', result);
        });
      })
   });